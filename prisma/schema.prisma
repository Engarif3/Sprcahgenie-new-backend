generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(uuid())
  email              String          @unique
  password           String
  name               String?
  role               UserRole
  needPasswordChange Boolean         @default(true)
  status             UserStatus      @default(ACTIVE)
  verificationToken  String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  admin              Admin?
  basicUser          BasicUser?
  favoriteWords      FavoriteWord[]
  logsAsActor        UserChangeLog[] @relation("PerformedByUser")
  logsAsTarget       UserChangeLog[] @relation("TargetUser")
  wordModifications  WordHistory[]
  words              Word[]          @relation("WordCreator")

  @@map("users")
}

model UserChangeLog {
  id            String   @id @default(uuid())
  targetUserId  String
  performedById String
  field         String
  oldValue      String
  newValue      String
  changedAt     DateTime @default(now())
  performedBy   User     @relation("PerformedByUser", fields: [performedById], references: [id], onDelete: Cascade)
  targetUser    User     @relation("TargetUser", fields: [targetUserId], references: [id], onDelete: Cascade)

  @@map("user_change_logs")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model BasicUser {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("basic_users")
}

model FavoriteWord {
  userId String
  wordId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  word   Word   @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@id([userId, wordId])
  @@map("favorite_words")
}

model Word {
  id                                Int            @id @default(autoincrement())
  value                             String         @unique
  meaning                           String[]
  sentences                         String[]
  levelId                           Int?
  topicId                           Int?
  articleId                         Int?
  partOfSpeechId                    Int?
  pluralForm                        String?
  modifiedFields                    String[]
  createdBy                         String
  favoritedBy                       FavoriteWord[]
  history                           WordHistory[]
  article                           Article?       @relation("WordArticle", fields: [articleId], references: [id], map: "fk_word_article")
  level                             Level?         @relation("WordLevel", fields: [levelId], references: [id], map: "fk_word_level")
  partOfSpeech                      PartOfSpeech?  @relation("WordPartOfSpeech", fields: [partOfSpeechId], references: [id], map: "fk_word_part_of_speech")
  topic                             Topic?         @relation("WordTopic", fields: [topicId], references: [id], map: "fk_word_topic")
  creator                           User           @relation("WordCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  words_table_AntonymRelation_A     Word[]         @relation("AntonymRelation")
  words_table_AntonymRelation_B     Word[]         @relation("AntonymRelation")
  words_table_SimilarWordRelation_A Word[]         @relation("SimilarWordRelation")
  words_table_SimilarWordRelation_B Word[]         @relation("SimilarWordRelation")
  words_table_SynonymRelation_A     Word[]         @relation("SynonymRelation")
  words_table_SynonymRelation_B     Word[]         @relation("SynonymRelation")

  @@map("words_table")
}

model WordHistory {
  id             Int      @id @default(autoincrement())
  wordId         Int
  userId         String
  value          String?
  meaning        String[]
  sentences      String[]
  modifiedAt     DateTime @default(now())
  modifiedFields String[]
  newData        Json
  oldData        Json?
  pluralForm     String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  word           Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@map("word_history")
}

model Level {
  id            Int            @id @default(autoincrement())
  level         String         @unique
  deletedAt     DateTime?      @db.Timestamptz(6)
  conversations Conversation[]
  topics        Topic[]        @relation("LevelTopics")
  words         Word[]         @relation("WordLevel")

  @@map("levels")
}

model Topic {
  id      Int    @id @default(autoincrement())
  name    String @unique
  levelId Int
  level   Level  @relation("LevelTopics", fields: [levelId], references: [id], onDelete: Cascade)
  words   Word[] @relation("WordTopic")

  @@map("topics")
}

model Article {
  id    Int    @id @default(autoincrement())
  name  String @unique
  words Word[] @relation("WordArticle")

  @@map("articles")
}

model PartOfSpeech {
  id    Int    @id @default(autoincrement())
  name  String @unique
  words Word[] @relation("WordPartOfSpeech")

  @@map("parts_of_speech")
}

model Conversation {
  id      Int    @id @default(autoincrement())
  topic   String
  text    Json
  levelId Int
  level   Level  @relation(fields: [levelId], references: [id])
}

model PrefixType {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  prefixes Prefix[]

  @@map("prefix_types")
}

model Prefix {
  id           Int        @id @default(autoincrement())
  prefixName   String
  meaning      String[]
  sentences    String[]
  prefixTypeId Int
  prefixWord   String     @unique
  verb         Boolean
  prefixType   PrefixType @relation(fields: [prefixTypeId], references: [id])

  @@map("prefixes")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  BASIC_USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
  PENDING
}
